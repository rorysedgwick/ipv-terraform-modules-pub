name: Publish module version

on:
  workflow_dispatch:
    inputs:
      module:
        description: "The module to publish a new version of"
        type: string
        required: true
      version:
        description: "The new version number to publish. Must be in the format x.y.z"
        type: string
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SENIOR_SRE_TOKEN }}

      - name: Print inputs
        run: |
          echo " Module: ${{ inputs.module }}"
          echo " Version to publish: ${{ inputs.version }}"

      - name: Compose tag
        run: |
          TAG=${{ inputs.module }}/v${{ inputs.version }}
          echo " Proposed tag is $TAG"
          MINOR_TAG=$(echo $TAG | cut -d '.' -f '1,2')
          echo " Minor tag is $MINOR_TAG"
          MAJOR_TAG=$(echo $TAG | cut -d '.' -f '1')
          echo " Major tag is $MAJOR_TAG"

          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "MINOR_TAG=$MINOR_TAG" >> $GITHUB_ENV
          echo "MAJOR_TAG=$MAJOR_TAG" >> $GITHUB_ENV

          echo " TODO Fail if tag is lower than latest?"

      - name: Verify tag does not already exist
        run: |
          echo "Checking for existing tag ${{ env.TAG }}"
          if [[ $(git tag --list ${{ env.TAG }} | wc -l) -gt 0 ]]; then echo "Tag ${{ env.TAG }} already exists, exiting" && exit 1
          else echo "Existing tag ${{ env.TAG }} not found, proceeding"
          fi

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install jq

      - name: Find current module version
        id: current_version
        run: |
          CURRENT_VERSION=$(jq .${{ inputs.module }}.version manifest.json -r)
          echo " CURRENT_VERSION is $CURRENT_VERSION"
          echo  "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Verify input version is not the same as current version
        run: |
          if [[ ${{ env.CURRENT_VERSION }} == ${{ inputs.version }} ]]; then echo "Input version is same as current version, exiting" && exit 1
          fi

      - name: Overwrite module version numbers
        run: |
          echo " Replacing module CURRENT_VERSION of ${{ env.CURRENT_VERSION }} with ${{ inputs.version }}"
          sed -i 's/${{ env.CURRENT_VERSION }}/${{ inputs.version }}/g' $GITHUB_WORKSPACE/${{ inputs.module }}/variables.tf
          cat $GITHUB_WORKSPACE/${{ inputs.module }}/variables.tf | grep 'version'

      - name: Update manifest module version number
        id: update_manifest
        run: |
          jq '.${{ inputs.module }}.version |= "${{ inputs.version }}"' manifest.json > updated_manifest.json
          mv updated_manifest.json manifest.json

      - name: Print updated manifest
        id: print_manifest
        run: |
          echo " Printing updated manifest version: "
          cat manifest.json
          UPDATED_VERSION=$(jq .${{ inputs.module }}.version manifest.json -r)
          echo " UPDATED_VERSION is $UPDATED_VERSION"

      # Using Senior SRE's account here (not possible to alter GITHUB_TOKEN to include write permissions- project policy)
      - name: setup git config
        run: |
          git config user.name "Identity Pod Module Release"
          git config user.email "rory.sedgwick@digital.cabinet-office.gov.uk"

      - name: Create SemVer tag, commit & push
        run : |
          git add manifest.json $GITHUB_WORKSPACE/${{ inputs.module }}/variables.tf
          git commit -m "Publishing: ${{ env.TAG }}" --no-verify
          git tag -a "${{ env.TAG }}" -m "${{ env.TAG }}"
          git push --atomic origin main --tags
          git tag

      - name: Overwrite major & minor tags
        run: |
          git push --delete origin :refs/tags/${{ env.MINOR_TAG }} :refs/tags/${{ env.MAJOR_TAG }}
          git tag -af "${{ env.MINOR_TAG }}" -m "${{ env.MINOR_TAG }}"
          git tag -af "${{ env.MAJOR_TAG }}" -m "${{ env.MAJOR_TAG }}"
          git tag
          git push --atomic origin main --tags
